{"name":"On-web-ui","tagline":"","body":"# On Web UI [![Build Status](https://travis-ci.org/RackHD/on-web-ui.svg?branch=master)](https://travis-ci.org/RackHD/on-web-ui) [![Code Climate](https://codeclimate.com/github/RackHD/on-web-ui/badges/gpa.svg)](https://codeclimate.com/github/RackHD/on-web-ui) [![Coverage Status](https://coveralls.io/repos/RackHD/on-web-ui/badge.svg?branch=master&service=github)](https://coveralls.io/github/RackHD/on-web-ui?branch=master)\r\n\r\nCopyright 2015, EMC, Inc.\r\n\r\n### Quick getting started guide.\r\n\r\n**Requires Node v4 or greater to run on-web-ui dev tools.**\r\n\r\n```bash\r\n$ git clone https://github.com/RackHD/on-web-ui.git\r\n$ cd on-web-ui\r\n$ npm run uninstall             # Uninstall all node_modules from last install.\r\n$ npm install                   # Install Node.js modules.\r\n$ npm run install               # Run install script. (Not required on Mac)\r\n$ npm start                     # Start on-web-ui development environment.\r\n$ npm test                      # Runs all automated tests against On Web UI.\r\n```\r\n\r\nThis will start a development server that will automatically refresh when code changes are made. It uses [BrowserSync](http://www.browsersync.io/) to accomplish this.\r\n\r\nBy default there will be two servers running. One on port `5000` which will be proxied by another on port `3000`.\r\n\r\n * http://localhost:3000 is the MonoRail Web UI.\r\n\r\n### How to build On Web UI applications.\r\n\r\nBy default, builds run in debug mode. If you need to build in release mode, add the `--release` flag.\r\n\r\n```bash\r\n$ cd dev                        # Gulp tasks must be run from `dev/`.\r\n$ gulp build                    # Or, `gulp build --release`.\r\n```\r\nThis will generate a `build/` directory at the project root. The contents of this directory can be served by any HTTP file server in order to deploy all the On Web UI applications.\r\n\r\n```bash\r\n$ cd dev                        # Gulp tasks must be run from `dev/`.\r\n$ gulp assets less bundle       # A more verbose way to build.\r\n```\r\n\r\nThe `build` task actually runs three different tasks sequentially.\r\n * `gulp assets` -- Copies all assets in `apps/[app]/assets` to `build/[app]`.\r\n * `gulp less` -- Compiles less/css files in `apps/[app]/less` to `build/[app]`.\r\n * `gulp bundle` -- Compiles and bundles es6/7 javascript code from `apps/[app]/bundle.js` into `build/bundle/[app].js`.\r\n\r\n### More on Automated Tests.\r\n\r\nRun unit tests powered by [Karma](http://karma-runner.github.io/), [Mocha](http://mochajs.org/), and [Chai](http://chaijs.com/), with [Spies](https://github.com/chaijs/chai-spies)\r\n\r\nTests are designed to run in a real web browser such as Chrome or FireFox. By default Chrome must be present when running the tests.\r\n\r\n```bash\r\n$ npm test                       # Or, `npm run-script test-ci` for Jenkins.\r\n```\r\n\r\nTest any javascript module by creating a `__tests__/` directory where\r\nthe file is. Name the test by appending `-test.js` to the JavaScript file.\r\n\r\n### Project Organization\r\n\r\n```bash\r\n.\r\n├── apps              # Directory of separated applications.\r\n│   │\r\n│   ├── {app}\r\n│   │   ├── assets        # Static files to be made public.\r\n│   │   ├── config        # Application configuration files and routes.\r\n│   │   ├── less          # Less and CSS files.\r\n│   │   ├── lib           # Reusable JavaScript code.\r\n│   │   ├── messengers    # Actions modules delegate calls to stores.\r\n│   │   ├── mixins        # React component mixin definitions.\r\n│   │   ├── node_modules  # External application dependencies.\r\n│   │   ├── stores        # Stores contain persisted application data.\r\n│   │   ├── views         # React views.\r\n│   │   │\r\n│   │   ├── bundle.js     # Main application entry point.\r\n│   │   ├── package.json  # Application NPM package, dependency file.\r\n│   │   └── README.md     # Application specific documentation.\r\n│   │\r\n│   ├── index.html    # Default app redirector HTML file.\r\n│   └── README.md     # Generic application documentation.\r\n│\r\n├── build             # Output folder for built code.\r\n│   │\r\n│   ├── {app}         # Compiled CSS, HTML and assets go in app folders.\r\n│   └── bundle        # Compiled JavaScript code for all apps go here.\r\n│\r\n├── node_modules      # External project dependencies.\r\n|\r\n├── debian            # Debian packaging directory.\r\n│\r\n├── dev                   # Scripts for dev, build, and test.\r\n│   │\r\n│   ├── app_tests         # Application tests bootstrap source code.\r\n│   ├── lib               # Reusable JavaScript code for development.\r\n│   │\r\n│   ├── node_modules      # External development dependencies.\r\n│   │\r\n│   ├── slush_app         # [Optional] slush-app location.\r\n│   │\r\n│   ├── specs             # Specification documents.\r\n│   ├── tasks             # Gulp task definitions.\r\n│   ├── tools             # Miscellaneous development scripts.\r\n│   │\r\n│   ├── deb_package.sh    # Debian packaging script.\r\n│   ├── Dockerfile        # Docker container configuration file.\r\n│   ├── gulpfile.js       # Gulp file for project gulp tasks.\r\n│   │\r\n│   ├── karma.*ci.conf.js  # Karma configuration for continuous integration.\r\n│   ├── karma.conf.js      # Karma test running configuration for development.\r\n│   │\r\n│   ├── package.json      # Development NPM package, dependency file.\r\n│   ├── provision.sh      # Provision script for environment setup.\r\n│   ├── README.md         # Project development documentation.\r\n│   └── Vagrantfile       # Vagrant VM configuration file.\r\n│\r\n├── server                # Build server.\r\n│   │\r\n│   ├── node_modules      # External server dependencies.\r\n│   │\r\n│   ├── build_server.js   # Build server source file.\r\n│   ├── package.json      # Server NPM dependency file.\r\n│   └── README.md         # Server documentation.\r\n|\r\n├── .babelrc          # BabelJS configuration file.\r\n├── .eslintrc         # eslint configuration file.\r\n├── .gitignore        # git ignored files.\r\n│\r\n├── HWIMO-BUILD       # Build script.\r\n├── HWIMO-DOC         # Doc script.\r\n├── HWIMO-TEST        # Test script.\r\n│\r\n├── package.json      # Main NPM package, dependency file.\r\n└── README.md         # Everything that follows is a result of what you see here.\r\n```\r\n\r\n### Core Technologies\r\n * [BabelJS](http://babeljs.io/docs/learn-es2015/#ecmascript-6-features')\r\n * [React](https://facebook.github.io/react/docs/getting-started.html)\r\n * [Radium](http://projects.formidablelabs.com/radium/)\r\n * [Material UI](http://material-ui.com/#/components/appbar)\r\n * [BrowserSync](http://www.browsersync.io/)\r\n * [Webpack](http://webpack.github.io/)\r\n * [Gulp](http://gulpjs.com/)\r\n * [Karma](http://karma-runner.github.io/)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}